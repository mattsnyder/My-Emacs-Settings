;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "ruby-style.el"
    :file "ruby-style.el"
    :pointmax 2138
    :major-mode 'emacs-lisp-mode
    :tokens '(("ruby-style-revision" variable nil "$Revision$" ((const . t)) "Ruby style revision string." nil [412 487]) ("ruby-style-version" variable nil (progn (string-match "[0-9.]+" ruby-style-revision) (substring ruby-style-revision (match-beginning 0) (match-end 0))) ((const . t)) "Ruby style version number." nil [489 676]) ("ruby-style-case-indent" function nil ("x") nil (save-excursion (back-to-indentation) (unless (progn (backward-up-list) (back-to-indentation) (> (point) (cdr x))) (goto-char (cdr x)) (if (looking-at "\\<case\\|default\\>") (quote *)))) nil [678 934]) ("ruby-style-label-indent" function nil ("x") nil (save-excursion (back-to-indentation) (unless (progn (backward-up-list) (back-to-indentation) (>= (point) (cdr x))) (goto-char (cdr x)) (condition-case nil (progn (backward-up-list) (backward-sexp 2) (if (looking-at "\\<switch\\>") (quote /))) (error)))) nil [936 1313]) ("cc-styles" include nil nil nil [1315 1335]) ("c-add-style" code nil [1336 1664]) ("ruby-style-c-mode" function nil nil nil (interactive) nil [1666 2114]) ("ruby-style" package nil nil nil [2116 2137]))
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ruby-mode.el"
    :file "ruby-mode.el"
    :pointmax 53920
    :major-mode 'emacs-lisp-mode
    :tokens '(("ruby-mode-revision" variable nil "$Revision$" ((const . t)) "Ruby mode revision string." nil [94 167]) ("ruby-mode-version" variable nil (and (string-match "[0-9.]+" ruby-mode-revision) (substring ruby-mode-revision (match-beginning 0) (match-end 0))) ((const . t)) "Ruby mode version number." nil [169 351]) ("ruby-keyword-end-re" variable nil (if (string-match "\\_>" "ruby") "\\_>" "\\>") ((const . t)) nil nil [353 442]) ("ruby-block-beg-keywords" variable nil (quote ("class" "module" "def" "if" "unless" "case" "while" "until" "for" "begin" "do")) ((const . t)) "Keywords at the beginning of blocks." nil [444 603]) ("ruby-block-beg-re" variable nil (regexp-opt ruby-block-beg-keywords) ((const . t)) "Regexp to match the beginning of blocks." nil [605 717]) ("ruby-non-block-do-re" variable nil (concat (regexp-opt (quote ("while" "until" "for" "rescue")) t) ruby-keyword-end-re) ((const . t)) "Regexp to match" nil [719 850]) ("ruby-indent-beg-re" variable nil (concat "\\(\\s *" (regexp-opt (quote ("class" "module" "def")) t) "\\)" (regexp-opt (quote ("if" "unless" "case" "while" "until" "for" "begin")))) ((const . t)) "Regexp to match where the indentation gets deeper." nil [852 1082]) ("ruby-modifier-beg-keywords" variable nil (quote ("if" "unless" "while" "until")) ((const . t)) "Modifiers that are the same as the beginning of blocks." nil [1084 1216]) ("ruby-modifier-beg-re" variable nil (regexp-opt ruby-modifier-beg-keywords) ((const . t)) "Regexp to match modifiers same as the beginning of blocks." nil [1218 1354]) ("ruby-modifier-re" variable nil (regexp-opt (cons "rescue" ruby-modifier-beg-keywords)) ((const . t)) "Regexp to match modifiers." nil [1356 1472]) ("ruby-block-mid-keywords" variable nil (quote ("then" "else" "elsif" "when" "rescue" "ensure")) ((const . t)) "Keywords where the indentation gets shallower in middle of block statements." nil [1474 1641]) ("ruby-block-mid-re" variable nil (regexp-opt ruby-block-mid-keywords) ((const . t)) "Regexp to match where the indentation gets shallower in middle of block statements." nil [1643 1798]) ("ruby-block-op-keywords" variable nil (quote ("and" "or" "not")) ((const . t)) "Block operators." nil [1800 1876]) ("ruby-block-hanging-re" variable nil (regexp-opt (append ruby-modifier-beg-keywords ruby-block-op-keywords)) ((const . t)) "Regexp to match hanging block modifiers." nil [1878 2029]) ("ruby-block-end-re" variable nil "\\<end\\>" ((const . t)) nil nil [2031 2071]) ("ruby-here-doc-beg-re" variable nil "\\(<\\)<\\(-\\)?\\(\\([a-zA-Z0-9_]+\\)\\|[\"]\\([^\"]+\\)[\"]\\|[']\\([^']+\\)[']\\)" ((const . t)) nil nil [2073 2193]) ("ruby-here-doc-end-re" variable nil "^\\([ 	]+\\)?\\(.*\\)\\(.\\)$" ((const . t)) nil nil [2195 2261]) ("ruby-here-doc-end-match" function nil nil nil (concat "^" (if (match-string 2) "[ 	]*" nil) (regexp-quote (or (match-string 4) (match-string 5) (match-string 6)))) nil [2263 2479]) ("ruby-here-doc-beg-match" function nil nil nil (let ((contents (regexp-quote (concat (match-string 2) (match-string 3))))) (concat "<<" (let ((match (match-string 1))) (if (and match (> (length match) 0)) (concat "\\(?:-\\([\"']?\\)\\|\\([\"']\\)" (match-string 1) "\\)" contents "\\b\\(\\1\\|\\2\\)") (concat "-?\\([\"']\\|\\)" contents "\\b\\1"))))) nil [2481 2912]) ("ruby-delimiter" variable nil (concat "[?$/%(){}#\"'`.:]\\|<<\\|\\[\\|\\]\\|\\<\\(" ruby-block-beg-re "\\)\\>\\|" ruby-block-end-re "\\|^=begin\\|" ruby-here-doc-beg-re) ((const . t)) nil nil [2914 3114]) ("ruby-negative" variable nil (concat "^[ 	]*\\(\\(" ruby-block-mid-re "\\)\\>\\|" ruby-block-end-re "\\|}\\|\\]\\)") ((const . t)) "Regexp to match where the indentation gets shallower." nil [3116 3299]) ("ruby-operator-chars" variable nil "-,.+*/%&|^~=<>:" ((const . t)) nil nil [3301 3349]) ("ruby-operator-re" variable nil (concat "[" ruby-operator-chars "]") ((const . t)) nil nil [3350 3414]) ("ruby-symbol-chars" variable nil "a-zA-Z0-9_" ((const . t)) nil nil [3416 3457]) ("ruby-symbol-re" variable nil (concat "[" ruby-symbol-chars "]") ((const . t)) nil nil [3458 3518]) ("ruby-mode-abbrev-table" variable nil nil nil "Abbrev table in use in ruby-mode buffers." nil [3520 3601]) ("define-abbrev-table" code nil [3603 3651]) ("ruby-mode-map" variable nil nil nil "Keymap used in ruby mode." nil [3653 3707]) ("if" code nil [3709 4584]) ("ruby-mode-syntax-table" variable nil nil nil "Syntax table in use in ruby-mode buffers." nil [4586 4667]) ("if" code nil [4669 6184]) ("ruby-indent-tabs-mode" variable nil nil ((user-visible . t)) "*Indentation can insert tabs in ruby mode if this is non-nil." nil [6186 6319]) ("put" code nil [6320 6379]) ("ruby-indent-level" variable nil 2 ((user-visible . t)) "*Indentation of ruby statements." nil [6381 6479]) ("put" code nil [6480 6535]) ("ruby-comment-column" variable nil 32 ((user-visible . t)) "*Indentation column of comments." nil [6537 6638]) ("put" code nil [6639 6696]) ("ruby-deep-arglist" variable nil t ((user-visible . t)) "*Deep indent lists in parenthesis when non-nil.
Also ignores spaces after parenthesis when 'space." nil [6698 6847]) ("put" code nil [6848 6903]) ("ruby-deep-indent-paren" variable nil (quote (40 91 93 t)) ((user-visible . t)) "*Deep indent lists in parenthesis when non-nil. t means continuous line.
Also ignores spaces after parenthesis when 'space." nil [6905 7099]) ("ruby-deep-indent-paren-style" variable nil (quote space) nil "Default deep indent style." nil [7101 7218]) ("ruby-encoding-map" variable nil (quote ((shift_jis . cp932) (shift-jis . cp932))) nil "Alist to map encoding name from emacs to ruby." nil [7220 7358]) ("ruby-use-encoding-map" variable nil t ((user-visible . t)) "*Use `ruby-encoding-map' to set encoding magic comment if this is non-nil." nil [7360 7504]) ("eval-when-compile" code nil [7506 7539]) ("ruby-imenu-create-index-in-block" function nil ("prefix" "beg" "end") nil (let ((index-alist (quote nil)) (case-fold-search nil) name next pos decl sing) (goto-char beg) (while (re-search-forward "^\\s *\\(\\(class\\s +\\|\\(class\\s *<<\\s *\\)\\|module\\s +\\)\\([^(<
 ]+\\)\\|\\(def\\|alias\\)\\s +\\([^(
 ]+\\)\\)" end t) (setq sing (match-beginning 3)) (setq decl (match-string 5)) (setq next (match-end 0)) (setq name (or (match-string 4) (match-string 6))) (setq pos (match-beginning 0)) (cond ((string= "alias" decl) (if prefix (setq name (concat prefix name))) (push (cons name pos) index-alist)) ((string= "def" decl) (if prefix (setq name (cond ((string-match "^self." name) (concat (substring prefix 0 -1) (substring name 4))) (t (concat prefix name))))) (push (cons name pos) index-alist) (ruby-accurate-end-of-block end)) (t (if (string= "self" name) (if prefix (setq name (substring prefix 0 -1))) (if prefix (setq name (concat (substring prefix 0 -1) "::" name))) (push (cons name pos) index-alist)) (ruby-accurate-end-of-block end) (setq beg (point)) (setq index-alist (nconc (ruby-imenu-create-index-in-block (concat name (if sing "." "#")) next beg) index-alist)) (goto-char beg)))) index-alist) nil [7540 9071]) ("ruby-imenu-create-index" function nil nil nil (nreverse (ruby-imenu-create-index-in-block nil (point-min) nil)) nil [9073 9175]) ("ruby-accurate-end-of-block" function nil ("&optional" "end") nil (let (state) (or end (setq end (point-max))) (while (and (setq state (apply (quote ruby-parse-partial) end state)) (>= (nth 2 state) 0) (< (point) end)))) nil [9177 9401]) ("ruby-mode-variables" function nil nil nil (set-syntax-table ruby-mode-syntax-table) nil [9403 10532]) ("ruby-mode-set-encoding" function nil nil nil (save-excursion (widen) (goto-char (point-min)) (when (re-search-forward "[^ -]" nil t) (goto-char (point-min)) (let ((coding-system (or coding-system-for-write buffer-file-coding-system))) (if coding-system (setq coding-system (or (coding-system-get coding-system (quote mime-charset)) (coding-system-change-eol-conversion coding-system nil)))) (setq coding-system (if coding-system (symbol-name (or (and ruby-use-encoding-map (cdr (assq coding-system ruby-encoding-map))) coding-system)) "ascii-8bit")) (if (looking-at "^#![^
]*ruby") (beginning-of-line 2)) (cond ((looking-at "\\s *#.*-*-\\s *\\(en\\)?coding\\s *:\\s *\\([-a-z0-9_]*\\)\\s *\\(;\\|-*-\\)") (unless (string= (match-string 2) coding-system) (goto-char (match-beginning 2)) (delete-region (point) (match-end 2)) (and (looking-at "-*-") (let ((n (skip-chars-backward " "))) (cond ((= n 0) (insert "  ") (backward-char)) ((= n -1) (insert " ")) ((forward-char))))) (insert coding-system))) ((looking-at "\\s *#.*coding\\s *[:=]")) (t (insert "# -*- coding: " coding-system " -*-
")))))) nil [10534 12112]) ("ruby-mode" function nil nil ((user-visible . t)) "Major mode for editing ruby scripts.
\\[ruby-indent-command] properly indents subexpressions of multi-line
class, module, def, if, while, for, do, and case statements, taking
nesting into account.

The variable ruby-indent-level controls the amount of indentation.
\\{ruby-mode-map}" nil [12129 13573]) ("ruby-current-indentation" function nil nil nil (save-excursion (beginning-of-line) (back-to-indentation) (current-column)) nil [13575 13700]) ("ruby-indent-line" function nil ("&optional" "flag") nil "Correct indentation of the current ruby line." nil [13702 13836]) ("ruby-indent-command" function nil nil nil (interactive) nil [13838 13907]) ("ruby-indent-to" function nil ("x") nil (if x (let (shift top beg) (and (< x 0) (error "invalid nest")) (setq shift (current-column)) (beginning-of-line) (setq beg (point)) (back-to-indentation) (setq top (current-column)) (skip-chars-backward " 	") (if (>= shift top) (setq shift (- shift top)) (setq shift 0)) (if (and (bolp) (= x top)) (move-to-column (+ x shift)) (move-to-column top) (delete-region beg (point)) (beginning-of-line) (indent-to x) (move-to-column (+ x shift))))) nil [13909 14548]) ("ruby-special-char-p" function nil ("&optional" "pnt") nil (setq pnt (or pnt (point))) nil [14550 14844]) ("ruby-expr-beg" function nil ("&optional" "option") nil (save-excursion (store-match-data nil) (let ((space (skip-chars-backward " 	")) (start (point))) (cond ((bolp) t) ((progn (forward-char -1) (and (looking-at "\\?") (or (eq (char-syntax (char-before (point))) 119) (ruby-special-char-p)))) nil) ((and (eq option (quote heredoc)) (< space 0)) t) ((or (looking-at ruby-operator-re) (looking-at "[\\[({,;]") (and (looking-at "[!?]") (or (not (eq option (quote modifier))) (bolp) (save-excursion (forward-char -1) (looking-at "\\Sw$")))) (and (looking-at ruby-symbol-re) (skip-chars-backward ruby-symbol-chars) (cond ((looking-at (regexp-opt (append ruby-block-beg-keywords ruby-block-op-keywords ruby-block-mid-keywords) (quote words))) (goto-char (match-end 0)) (not (looking-at "\\s_"))) ((eq option (quote expr-qstr)) (looking-at "[a-zA-Z][a-zA-z0-9_]* +%[^ 	]")) ((eq option (quote expr-re)) (looking-at "[a-zA-Z][a-zA-z0-9_]* +/[^ 	]")) (t nil)))))))) nil [14846 16292]) ("ruby-forward-string" function nil ("term" "&optional" "end" "no-error" "expand") nil (let ((n 1) (c (string-to-char term)) (re (if expand (concat "[^\\]\\(\\\\\\\\\\)*\\([" term "]\\|\\(#{\\)\\)") (concat "[^\\]\\(\\\\\\\\\\)*[" term "]")))) (while (and (re-search-forward re end no-error) (if (match-beginning 3) (ruby-forward-string "}{" end no-error nil) (> (setq n (if (eq (char-before (point)) c) (1- n) (1+ n))) 0))) (forward-char -1)) (cond ((zerop n)) (no-error nil) ((error "unterminated string")))) nil [16294 16947]) ("ruby-deep-indent-paren-p" function nil ("c") nil (cond ((listp ruby-deep-indent-paren) (let ((deep (assoc c ruby-deep-indent-paren))) (cond (deep (or (cdr deep) ruby-deep-indent-paren-style)) ((memq c ruby-deep-indent-paren) ruby-deep-indent-paren-style)))) ((eq c ruby-deep-indent-paren) ruby-deep-indent-paren-style) ((eq c 40) ruby-deep-arglist)) nil [16949 17379]) ("ruby-parse-partial" function nil ("&optional" "end" "in-string" "nest" "depth" "pcol" "indent") nil (or depth (setq depth 0)) nil [17381 25195]) ("ruby-parse-region" function nil ("start" "end") nil (let (state) (save-excursion (if start (goto-char start) (ruby-beginning-of-indent)) (save-restriction (narrow-to-region (point) end) (while (and (> end (point)) (setq state (apply (quote ruby-parse-partial) end state)))))) (list (nth 0 state) (car (nth 1 state)) (nth 2 state) (car (car (nth 3 state))))) nil [25197 25779]) ("ruby-indent-size" function nil ("pos" "nest") nil (+ pos (* (or nest 1) ruby-indent-level)) nil [25781 25860]) ("ruby-calculate-indent" function nil ("&optional" "parse-start") nil (save-excursion (beginning-of-line) (let ((indent-point (point)) (case-fold-search nil) state bol eol begin op-end (paren (progn (skip-syntax-forward " ") (and (char-after) (matching-paren (char-after))))) (indent 0)) (if parse-start (goto-char parse-start) (ruby-beginning-of-indent) (setq parse-start (point))) (back-to-indentation) (setq indent (current-column)) (setq state (ruby-parse-region parse-start indent-point)) (cond ((nth 0 state) (setq indent nil)) ((car (nth 1 state)) (goto-char (setq begin (cdr (nth 1 state)))) (let ((deep (ruby-deep-indent-paren-p (car (nth 1 state))))) (if deep (cond ((and (eq deep t) (eq (car (nth 1 state)) paren)) (skip-syntax-backward " ") (setq indent (1- (current-column)))) ((let ((s (ruby-parse-region (point) indent-point))) (and (nth 2 s) (> (nth 2 s) 0) (or (goto-char (cdr (nth 1 s))) t))) (forward-word -1) (setq indent (ruby-indent-size (current-column) (nth 2 state)))) (t (setq indent (current-column)) (cond ((eq deep (quote space))) (paren (setq indent (1- indent))) (t (setq indent (ruby-indent-size (1- indent) 1)))))) (if (nth 3 state) (goto-char (nth 3 state)) (goto-char parse-start) (back-to-indentation)) (setq indent (ruby-indent-size (current-column) (nth 2 state)))) (and (eq (car (nth 1 state)) paren) (ruby-deep-indent-paren-p (matching-paren paren)) (search-backward (char-to-string paren)) (setq indent (current-column))))) ((and (nth 2 state) (> (nth 2 state) 0)) (if (null (cdr (nth 1 state))) (error "invalid nest")) (goto-char (cdr (nth 1 state))) (forward-word -1) (setq begin (point)) (cond ((looking-at "do\\>[^_]") (if (nth 3 state) (goto-char (nth 3 state)) (goto-char parse-start) (back-to-indentation)) (setq indent (ruby-indent-size (current-column) (nth 2 state)))) (t (setq indent (+ (current-column) ruby-indent-level))))) ((and (nth 2 state) (< (nth 2 state) 0)) (setq indent (ruby-indent-size (current-column) (nth 2 state))))) (when indent (goto-char indent-point) (end-of-line) (setq eol (point)) (beginning-of-line) (cond ((and (not (ruby-deep-indent-paren-p paren)) (re-search-forward ruby-negative eol t)) (and (not (eq 95 (char-after (match-end 0)))) (setq indent (- indent ruby-indent-level)))) ((and (save-excursion (beginning-of-line) (not (bobp))) (or (ruby-deep-indent-paren-p t) (null (car (nth 1 state))))) (let (end done) (while (not done) (skip-chars-backward " 	
") (setq end (point)) (beginning-of-line) (if (re-search-forward "^\\s *#" end t) (beginning-of-line) (setq done t)))) (setq bol (point)) (end-of-line) (skip-chars-backward " 	") (let (end (pos (point))) (beginning-of-line) (while (and (re-search-forward "#" pos t) (setq end (1- (point))) (or (ruby-special-char-p end) (and (setq state (ruby-parse-region parse-start end)) (nth 0 state)))) (setq end nil)) (goto-char (or end pos)) (skip-chars-backward " 	") (setq begin (if (and end (nth 0 state)) pos (cdr (nth 1 state)))) (setq state (ruby-parse-region parse-start (point)))) (or (bobp) (forward-char -1)) (and (or (and (looking-at ruby-symbol-re) (skip-chars-backward ruby-symbol-chars) (looking-at (concat "\\<\\(" ruby-block-hanging-re "\\)\\>")) (not (eq (point) (nth 3 state))) (save-excursion (goto-char (match-end 0)) (not (looking-at "[a-z_]")))) (and (looking-at ruby-operator-re) (not (ruby-special-char-p)) (let ((c (char-after (point)))) (and (or (not (eq 47 c)) (null (nth 0 (ruby-parse-region (or begin parse-start) (point))))) (or (not (eq 124 (char-after (point)))) (save-excursion (or (eolp) (forward-char -1)) (cond ((search-backward "|" nil t) (skip-chars-backward " 	
") (and (not (eolp)) (progn (forward-char -1) (not (looking-at "{"))) (progn (forward-word -1) (not (looking-at "do\\>[^_]"))))) (t t)))) (not (eq 44 c)) (setq op-end t))))) (setq indent (cond ((and (null op-end) (not (looking-at (concat "\\<\\(" ruby-block-hanging-re "\\)\\>"))) (eq (ruby-deep-indent-paren-p t) (quote space)) (not (bobp))) (widen) (goto-char (or begin parse-start)) (skip-syntax-forward " ") (current-column)) ((car (nth 1 state)) indent) (t (+ indent ruby-indent-level)))))))) (goto-char indent-point) (beginning-of-line) (skip-syntax-forward " ") (if (looking-at "\\.[^.]") (+ indent ruby-indent-level) indent))) nil [25862 33110]) ("ruby-electric-brace" function nil ("arg") nil (interactive "P") nil [33112 33294]) ("eval-when-compile" code nil [33296 33665]) ("defun-region-command" code nil [33667 34044]) ("ruby-beginning-of-indent" function nil nil nil (and (re-search-backward (concat "^\\(" ruby-indent-beg-re "\\)\\b") nil (quote move)) (progn (beginning-of-line) t)) nil [34046 34246]) ("defun-region-command" code nil [34248 34623]) ("ruby-move-to-block" function nil ("n") nil (let (start pos done down) (setq start (ruby-calculate-indent)) (setq down (looking-at (if (< n 0) ruby-block-end-re (concat "\\<\\(" ruby-block-beg-re "\\)\\>")))) (while (and (not done) (not (if (< n 0) (bobp) (eobp)))) (forward-line n) (cond ((looking-at "^\\s *$")) ((looking-at "^\\s *#")) ((and (> n 0) (looking-at "^=begin\\>")) (re-search-forward "^=end\\>")) ((and (< n 0) (looking-at "^=end\\>")) (re-search-backward "^=begin\\>")) (t (setq pos (current-indentation)) (cond ((< start pos) (setq down t)) ((and down (= pos start)) (setq done t)) ((> start pos) (setq done t))))) (if done (save-excursion (back-to-indentation) (if (looking-at (concat "\\<\\(" ruby-block-mid-re "\\)\\>")) (setq done nil)))))) nil [34625 35632]) ("defun-region-command" code nil [35634 35799]) ("defun-region-command" code nil [35801 35955]) ("defun-region-command" code nil [35957 37763]) ("defun-region-command" code nil [37765 39636]) ("ruby-reindent-then-newline-and-indent" function nil nil nil (interactive "*") nil [39638 39889]) ("fset" code nil [39891 39954]) ("ruby-decomment-region" function nil ("beg" "end") nil (interactive "r") nil [39956 40195]) ("ruby-insert-end" function nil nil nil (interactive) nil [40197 40295]) ("ruby-mark-defun" function nil nil ((user-visible . t)) "Put mark at end of this Ruby function, point at beginning." nil [40297 40547]) ("ruby-indent-exp" function nil ("&optional" "shutup-p") ((user-visible . t)) "Indent each line in the balanced expression following point syntactically.
If optional SHUTUP-P is non-nil, no errors are signalled if no
balanced expression is found." nil [40549 41463]) ("ruby-add-log-current-method" function nil nil nil "Return current method string." nil [41465 44016]) ("cond" code nil [44018 53896]) ("ruby-mode" package nil nil nil [53899 53919]))
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ri-ruby.el"
    :file "ri-ruby.el"
    :pointmax 9556
    :major-mode 'emacs-lisp-mode
    :tokens '(("ansi-color" include nil nil nil [2223 2244]) ("ri-ruby-program" variable nil "ruby" nil "The ruby program name." nil [2246 2304]) ("ri-ruby-script" variable nil "/home/kristof/.xemacs/ri-emacs.rb" nil "the ruby script to communicate with" nil [2306 2405]) ("ri-ruby-process" variable nil nil nil "The current ri process where emacs is interacting with" nil [2407 2494]) ("ri-ruby-history" variable nil nil nil "The history for ri" nil [2496 2547]) ("ri-ruby-process-buffer" variable nil nil nil nil nil [2549 2584]) ("ri-ruby-get-process" function nil nil nil (cond ((or (null ri-ruby-process) (not (equal (process-status ri-ruby-process) (quote run)))) (setq ri-ruby-process (start-process "ri-ruby-process" nil ri-ruby-program ri-ruby-script)) (process-kill-without-query ri-ruby-process) (ri-ruby-process-check-ready))) nil [2586 2954]) ("ri-ruby-process-filter-expr" function nil ("proc" "str") nil (let ((ansi-color-context nil)) (save-excursion (set-buffer ri-ruby-process-buffer) (goto-char (point-max)) (insert-string (ansi-color-filter-apply str)))) nil [2956 3182]) ("ri-ruby-process-filter-lines" function nil ("proc" "str") nil (save-excursion (set-buffer ri-ruby-process-buffer) (goto-char (point-max)) (insert-string (ansi-color-apply str))) nil [3184 3361]) ("ri-startup-timeout" variable nil 60 nil nil nil [3363 3393]) ("ri-ruby-process-check-ready" function nil nil nil (let ((ri-ruby-process-buffer (generate-new-buffer " ri-ruby-output"))) (unwind-protect (save-excursion (set-buffer ri-ruby-process-buffer) (set-process-filter ri-ruby-process (quote ri-ruby-process-filter-expr)) (ri-ruby-check-process ri-ruby-process-buffer) (accept-process-output ri-ruby-process ri-startup-timeout) (goto-char (point-min)) (cond ((not (looking-at "READY.*
")) (delete-process ri-ruby-process) (error "Couldn't start ruby script")))) (set-process-filter ri-ruby-process t) (kill-buffer ri-ruby-process-buffer))) nil [3394 4001]) ("ri-ruby-check-process" function nil ("buffer") nil (or (equal (process-status ri-ruby-process) (quote run)) (let ((output (with-current-buffer buffer (buffer-substring (point-min) (point-max))))) (error "Process is not running.
" output))) nil [4003 4295]) ("ri-ruby-process-get-expr" function nil ("cmd" "param") nil (ri-ruby-get-process) nil [4297 5117]) ("ri-ruby-process-get-lines" function nil ("cmd" "param") nil (ri-ruby-get-process) nil [5119 5989]) ("ri-ruby-complete-method" function nil ("str" "pred" "type") nil (let* ((cmd (cdr (assoc type (quote ((nil . "TRY_COMPLETION") (t . "COMPLETE_ALL") (lambda . "LAMBDA")))))) (result (ri-ruby-process-get-expr cmd str))) (if (and pred (listp result)) (setq result (mapcar pred result))) result) nil [5991 6283]) ("ri-ruby-read-keyw" function nil nil nil (let* ((curr (current-word)) (match (ri-ruby-process-get-expr "LAMBDA" curr)) (default (if match curr nil)) (prompt (concat "method- or classname" (if default (concat " (default " default ")") "") ": ")) (keyw (completing-read prompt (quote ri-ruby-complete-method) nil t "" (quote ri-ruby-history) default)) (classes (ri-ruby-process-get-expr "CLASS_LIST" keyw)) (class (cond ((null classes) nil) ((null (cdr classes)) (caar classes)) (t (completing-read (concat prompt keyw " classname: ") classes nil t))))) (list keyw class)) nil [6297 6902]) ("ri-ruby-method-with-class" function nil ("meth" "classes") nil (if (null classes) meth (concat meth " [" (mapconcat (quote car) classes ", ") "]")) nil [6904 7042]) ("ri-ruby-complete-symbol" function nil nil ((user-visible . t)) "Completion on ruby-mode." nil [7044 8093]) ("test-ri-ruby-complete-symbol" function nil nil ((user-visible . t)) "Test of ri-ruby-complete-symbol." nil [8095 8367]) ("ri-ruby-show-args" function nil nil nil (interactive) nil [8369 8556]) ("ri" function nil ("keyw" "&optional" "class") ((user-visible . t)) "Execute `ri'." nil [8558 8993]) ("cond" code nil [8995 9555]))
    :unmatched-syntax 'nil
    )
   )
  )
